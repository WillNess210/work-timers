{"version":3,"sources":["logic/Timer.ts","logic/hooks/useInterval.ts","state/audioSlice.ts","state/timersSlice.ts","rootReducer.ts","store.ts","state/useTimerState.ts","logic/hooks/useTimer.ts","logic/hooks/useCounterTimer.ts","logic/hooks/useCountdownTimer.ts","components/TimeDisplay.tsx","components/Buttons/PlayStopButton.tsx","components/Buttons/RestartButton.tsx","components/Buttons/RestartPlusButton.tsx","components/Buttons/PlusButton.tsx","components/MuteButton.tsx","layout/timer/CounterTimerRenderer.tsx","state/useTimerFlashingState.ts","layout/timer/TimerRenderer.tsx","components/AudioSlider.tsx","state/useAudioState.ts","layout/header/HeaderAudioSlider.tsx","layout/header/Header.tsx","state/useGlobalTimersState.ts","state/beep.mp3","state/useBeeping.ts","App.tsx","reportWebVitals.js","index.js"],"names":["TimerType","useInterval","callback","delayInMs","callbackRef","useRef","useEffect","current","interval","setInterval","clearInterval","audioSlice","createSlice","name","initialState","muted","volume","reducers","setMuted","state","action","payload","setVolume","console","log","Math","min","max","defaultTimerState","seconds","stopped","flashing","timesCompleted","timersSlice","addTimer","setTimerState","key","setTimerSeconds","value","setTimerStopped","setTimerTimesCompleted","setTimerFlashing","setTimerMuted","startAllTimers","Object","keys","forEach","stopAllTimers","rootReducer","combineReducers","timers","reducer","audio","store","createStore","useAppDispatch","useDispatch","useAppSelector","useSelector","actions","useTimerState","dispatch","timerState","useMemo","undefined","useState","setSeconds","setStopped","currentSeconds","useTimer","timerStopped","setReduxSeconds","useCallback","setFlashing","incrementTimesCompleted","useCounterTimer","timer","durationInSeconds","useTimerStateResponse","previousFinishedTimestamp","setPreviousFinishedTimestamp","markedForRestart","setMarkedForRestart","resetTimer","incrementTimesCompletedCallback","secondsRemainingCalculation","calculation","secondsRemaining","resetTimerAndStop","resetTimerAndStart","useCountdownTimer","completeAndRestart","completeAndMarkForRestart","complete","restart","TimeDisplayState","timeDisplayStateToColor","Normal","Stopped","MarkedForRestart","getNumberDisplay","TimeDisplay","timeDisplay","displayString","minutes","hours","getTimeDisplayString","getTimeDisplay","size","color","PlayStopButton","onClick","RestartButton","buttonText","bg","leftIcon","RestartPlusButton","PlusButton","MuteButton","hoverColor","volumeIconColor","setVolumeIconColor","iconProps","onMouseEnter","onMouseLeave","CounterTimerRenderer","timerId","className","width","ml","title","fontWeight","letterSpacing","direction","spacing","align","NON_FLASH_COLOR","TimerRenderer","timersState","bgColor","setBgColor","useTimerFlashingState","type","CounterTimer","maxW","borderWidth","borderRadius","p","AudioSlider","setValue","disabled","React","showTooltip","setShowTooltip","onChange","val","isReversed","isDisabled","textAlign","mt","w","placement","hasArrow","isOpen","label","round","useAudioState","HeaderAudioSlider","style","marginRight","Header","pt","pb","useBeeping","anyFlashing","states","map","i","length","shouldBeep","Audio","file","play","waterTimer","waterTimer2","timersList","values","App","addTimers","count","useGlobalTimersState","minChildWidth","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a21c1ab6.chunk.js","sourcesContent":["export enum TimerType {\r\n  CounterTimer,\r\n}\r\n\r\nexport interface Timer {\r\n  type: TimerType;\r\n  title: string;\r\n}\r\n\r\nexport type TimerMap = { [key: string]: Timer };\r\n\r\nexport interface CounterTimer extends Timer {\r\n  type: TimerType.CounterTimer;\r\n  durationInSeconds: number;\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport default function useInterval(\r\n  callback: () => void,\r\n  delayInMs: number\r\n): void {\r\n  const callbackRef = useRef(callback);\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (!delayInMs) {\r\n      return () => {};\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      const current = callbackRef.current as undefined | (() => void);\r\n      current && current();\r\n    }, delayInMs);\r\n    return () => clearInterval(interval);\r\n  }, [delayInMs]);\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface AudioState {\r\n  muted: boolean;\r\n  volume: number; // between 0 and 1\r\n}\r\n\r\nconst initialState: AudioState = {\r\n  muted: false,\r\n  volume: 0.5,\r\n};\r\n\r\nconst audioSlice = createSlice({\r\n  name: \"audio\",\r\n  initialState,\r\n  reducers: {\r\n    setMuted: (state, action: PayloadAction<boolean>) => {\r\n      state.muted = action.payload;\r\n    },\r\n    setVolume: (state, action: PayloadAction<number>) => {\r\n      console.log(`Setting volume to ${action.payload}`);\r\n      state.volume = Math.min(Math.max(0, action.payload), 1);\r\n    },\r\n  },\r\n});\r\n\r\nexport default audioSlice;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface TimerState {\r\n  seconds: number;\r\n  stopped: boolean;\r\n  flashing: boolean;\r\n  // any timers with audio\r\n  muted: boolean;\r\n  // counter timer specific\r\n  timesCompleted: number;\r\n}\r\n\r\nexport interface TimersState {\r\n  [key: string]: TimerState;\r\n}\r\n\r\nconst defaultTimerState: TimerState = {\r\n  seconds: 0,\r\n  stopped: true,\r\n  flashing: false,\r\n  muted: false,\r\n  timesCompleted: 0,\r\n};\r\n\r\nconst initialState: TimersState = {};\r\n\r\nconst timersSlice = createSlice({\r\n  name: \"timers\",\r\n  initialState,\r\n  reducers: {\r\n    // adding timer\r\n    addTimer: (state, action: PayloadAction<string>) => {\r\n      state[action.payload] = { ...defaultTimerState };\r\n    },\r\n    // individual timer actions\r\n    setTimerState: (\r\n      state,\r\n      action: PayloadAction<{ key: string; state: TimerState }>\r\n    ) => {\r\n      state[action.payload.key] = action.payload.state;\r\n    },\r\n    setTimerSeconds: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: number }>\r\n    ) => {\r\n      state[action.payload.key].seconds = action.payload.value;\r\n    },\r\n    setTimerStopped: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: boolean }>\r\n    ) => {\r\n      state[action.payload.key].stopped = action.payload.value;\r\n    },\r\n    setTimerTimesCompleted: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: number }>\r\n    ) => {\r\n      state[action.payload.key].timesCompleted = action.payload.value;\r\n    },\r\n    setTimerFlashing: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: boolean }>\r\n    ) => {\r\n      state[action.payload.key].flashing = action.payload.value;\r\n    },\r\n    setTimerMuted: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: boolean }>\r\n    ) => {\r\n      state[action.payload.key].muted = action.payload.value;\r\n    },\r\n    // all timer actions\r\n    startAllTimers: (state) => {\r\n      const keys = Object.keys(state);\r\n      keys.forEach((key: string) => {\r\n        state[key].stopped = false;\r\n      });\r\n    },\r\n    stopAllTimers: (state) => {\r\n      const keys = Object.keys(state);\r\n      keys.forEach((key: string) => {\r\n        state[key].stopped = true;\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport default timersSlice;\r\n","import { combineReducers } from \"redux\";\r\nimport audioSlice from \"./state/audioSlice\";\r\nimport timersSlice from \"./state/timersSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  timers: timersSlice.reducer,\r\n  audio: audioSlice.reducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport default store;\r\n","import { useCallback, useEffect, useMemo } from \"react\";\r\nimport useTimer from \"../logic/hooks/useTimer\";\r\nimport { useAppDispatch, useAppSelector } from \"../store\";\r\nimport timersSlice, { TimerState } from \"./timersSlice\";\r\n\r\nexport interface UseTimerStateResponse {\r\n  timerState: TimerState | undefined;\r\n  seconds: number;\r\n  stopped: boolean;\r\n  flashing: boolean;\r\n  muted: boolean;\r\n  setStopped: (stopped: boolean) => void;\r\n  setFlashing: (flashing: boolean) => void;\r\n  setMuted: (muted: boolean) => void;\r\n  incrementTimesCompleted: () => void;\r\n}\r\n\r\nconst actions = timersSlice.actions;\r\n\r\nexport default function useTimerState(key: string): UseTimerStateResponse {\r\n  const state = useAppSelector((state) => state.timers);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const timerState = useMemo(\r\n    () => (key in state ? state[key] : undefined),\r\n    [state, key]\r\n  );\r\n\r\n  const {\r\n    currentSeconds,\r\n    stopped: timerStopped,\r\n    setStopped: setTimerStopped,\r\n  } = useTimer();\r\n\r\n  const setReduxSeconds = useCallback(\r\n    (seconds: number) => {\r\n      if (timerState) {\r\n        dispatch(actions.setTimerSeconds({ key, value: seconds }));\r\n      }\r\n    },\r\n    [key, timerState, dispatch, setTimerStopped]\r\n  );\r\n\r\n  const setStopped = useCallback(\r\n    (stopped: boolean) => {\r\n      if (timerState) {\r\n        dispatch(actions.setTimerStopped({ key, value: stopped }));\r\n      }\r\n    },\r\n    [key, timerState, dispatch, setTimerStopped]\r\n  );\r\n\r\n  const setFlashing = useCallback(\r\n    (flashing: boolean) => {\r\n      if (timerState) {\r\n        dispatch(actions.setTimerFlashing({ key, value: flashing }));\r\n      }\r\n    },\r\n    [key, timerState, dispatch]\r\n  );\r\n\r\n  const setMuted = useCallback(\r\n    (muted: boolean) => {\r\n      if (timerState) {\r\n        dispatch(actions.setTimerMuted({ key, value: muted }));\r\n      }\r\n    },\r\n    [key, timerState, dispatch]\r\n  );\r\n\r\n  const incrementTimesCompleted = useCallback(() => {\r\n    if (timerState) {\r\n      dispatch(\r\n        actions.setTimerTimesCompleted({\r\n          key,\r\n          value: timerState.timesCompleted + 1,\r\n        })\r\n      );\r\n    }\r\n  }, [key, timerState, dispatch]);\r\n\r\n  // if timerState.stopped changes, call setTimerStopped from useTimer\r\n  useEffect(() => {\r\n    if (timerState && timerState.stopped !== timerStopped) {\r\n      setTimerStopped(timerState.stopped);\r\n    }\r\n  }, [timerState, timerStopped, setTimerStopped]);\r\n\r\n  // if currentSeconds changes, call setReduxSeconds\r\n  useEffect(() => {\r\n    if (timerState && currentSeconds !== timerState.seconds)\r\n      setReduxSeconds(currentSeconds);\r\n  }, [timerState, currentSeconds, setReduxSeconds]);\r\n\r\n  return {\r\n    timerState,\r\n    seconds: timerState ? timerState.seconds : -1,\r\n    stopped: timerState ? timerState.stopped : true,\r\n    flashing: timerState ? timerState.flashing : true,\r\n    muted: timerState ? timerState.muted : true,\r\n    setStopped,\r\n    setFlashing,\r\n    setMuted,\r\n    incrementTimesCompleted,\r\n  };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport useInterval from \"./useInterval\";\r\n\r\nexport interface UseTimerResponse {\r\n  currentSeconds: number;\r\n  stopped: boolean;\r\n  setStopped: (stopped: boolean) => void;\r\n}\r\n\r\nexport default function useTimer(): UseTimerResponse {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [stopped, setStopped] = useState(true);\r\n\r\n  useInterval(() => {\r\n    setSeconds(stopped ? seconds : seconds + 1);\r\n  }, 1000);\r\n\r\n  return {\r\n    currentSeconds: seconds,\r\n    stopped,\r\n    setStopped,\r\n  };\r\n}\r\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { CounterTimer } from \"../Timer\";\r\nimport useCountdownTimer from \"./useCountdownTimer\";\r\n\r\ninterface UseCounterTimerResponse {\r\n  secondsRemaining: number;\r\n  timesCompleted: number;\r\n  stopped: boolean;\r\n  markedForRestart: boolean;\r\n  muted: boolean;\r\n  setMuted: (muted: boolean) => void;\r\n  setStopped: (stopped: boolean) => void;\r\n  // actions\r\n  complete: () => void;\r\n  completeAndRestart: () => void;\r\n  restart: () => void;\r\n  completeAndMarkForRestart: () => void;\r\n}\r\n\r\nexport default function useCounterTimer(\r\n  key: string,\r\n  timer: CounterTimer\r\n): UseCounterTimerResponse {\r\n  const {\r\n    timerState,\r\n    secondsRemaining,\r\n    stopped,\r\n    markedForRestart,\r\n    muted,\r\n    setMuted,\r\n    setStopped,\r\n    incrementTimesCompleted,\r\n    resetTimer,\r\n    setMarkedForRestart,\r\n  } = useCountdownTimer(key, timer.durationInSeconds);\r\n\r\n  const timesCompleted = timerState ? timerState.timesCompleted : -1;\r\n\r\n  const completeAndRestart = useCallback(() => {\r\n    incrementTimesCompleted();\r\n    resetTimer();\r\n  }, [incrementTimesCompleted, resetTimer]);\r\n\r\n  const completeAndMarkForRestart = useCallback(() => {\r\n    incrementTimesCompleted();\r\n    setMarkedForRestart();\r\n  }, [incrementTimesCompleted, setMarkedForRestart]);\r\n\r\n  return {\r\n    timesCompleted,\r\n    secondsRemaining,\r\n    stopped,\r\n    markedForRestart,\r\n    muted,\r\n    setMuted,\r\n    setStopped,\r\n    complete: incrementTimesCompleted,\r\n    restart: resetTimer,\r\n    completeAndRestart,\r\n    completeAndMarkForRestart,\r\n  };\r\n}\r\n","import { useCallback, useMemo, useState } from \"react\";\r\nimport useTimerState, {\r\n  UseTimerStateResponse,\r\n} from \"../../state/useTimerState\";\r\n\r\ninterface UseCountdownTimerResponse\r\n  extends Omit<UseTimerStateResponse, \"seconds\"> {\r\n  secondsRemaining: number;\r\n  markedForRestart: boolean;\r\n  resetTimer: () => void;\r\n  resetTimerAndStop: () => void;\r\n  resetTimerAndStart: () => void;\r\n  setMarkedForRestart: () => void;\r\n}\r\n\r\nexport default function useCountdownTimer(\r\n  key: string,\r\n  durationInSeconds: number\r\n): UseCountdownTimerResponse {\r\n  const useTimerStateResponse = useTimerState(key);\r\n  const {\r\n    timerState,\r\n    stopped,\r\n    seconds,\r\n    flashing,\r\n    setStopped,\r\n    setFlashing,\r\n    incrementTimesCompleted,\r\n  } = useTimerStateResponse;\r\n\r\n  const [previousFinishedTimestamp, setPreviousFinishedTimestamp] = useState(0);\r\n  const [markedForRestart, setMarkedForRestart] = useState(false);\r\n\r\n  const resetTimer = useCallback(() => {\r\n    setPreviousFinishedTimestamp(seconds);\r\n    setFlashing(false);\r\n  }, [setPreviousFinishedTimestamp, seconds, setFlashing]);\r\n\r\n  const incrementTimesCompletedCallback = useCallback(() => {\r\n    incrementTimesCompleted();\r\n    setFlashing(false);\r\n  }, [incrementTimesCompleted, setFlashing]);\r\n\r\n  const secondsRemainingCalculation = useMemo(() => {\r\n    if (timerState) {\r\n      const calculation =\r\n        durationInSeconds - (timerState.seconds - previousFinishedTimestamp);\r\n      if (calculation <= 0 && !flashing && !markedForRestart) {\r\n        setFlashing(true);\r\n      } else if (calculation <= 0 && markedForRestart) {\r\n        setMarkedForRestart(false);\r\n        resetTimer();\r\n      }\r\n      return calculation;\r\n    }\r\n    return 99999999999999;\r\n  }, [\r\n    durationInSeconds,\r\n    timerState,\r\n    previousFinishedTimestamp,\r\n    markedForRestart,\r\n    flashing,\r\n    setMarkedForRestart,\r\n    resetTimer,\r\n    setFlashing,\r\n  ]);\r\n\r\n  const secondsRemaining = useMemo(() => {\r\n    if (timerState) {\r\n      return Math.max(0, secondsRemainingCalculation);\r\n    }\r\n    return -1;\r\n  }, [secondsRemainingCalculation, timerState]);\r\n\r\n  const resetTimerAndStop = useCallback(() => {\r\n    resetTimer();\r\n    setStopped(true);\r\n  }, [resetTimer, setStopped]);\r\n\r\n  const resetTimerAndStart = useCallback(() => {\r\n    resetTimer();\r\n    setStopped(false);\r\n  }, [resetTimer, setStopped]);\r\n\r\n  return {\r\n    ...useTimerStateResponse,\r\n    timerState,\r\n    secondsRemaining,\r\n    stopped,\r\n    markedForRestart,\r\n    setStopped,\r\n    setFlashing,\r\n    resetTimer,\r\n    resetTimerAndStop,\r\n    resetTimerAndStart,\r\n    incrementTimesCompleted: incrementTimesCompletedCallback,\r\n    setMarkedForRestart: () => setMarkedForRestart(true),\r\n  };\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { Heading } from \"@chakra-ui/react\";\r\n\r\nexport enum TimeDisplayState {\r\n  Normal,\r\n  Stopped,\r\n  MarkedForRestart,\r\n}\r\n\r\nconst timeDisplayStateToColor: { [stateValue in TimeDisplayState]: string } = {\r\n  [TimeDisplayState.Normal]: \"black\",\r\n  [TimeDisplayState.Stopped]: \"red\",\r\n  [TimeDisplayState.MarkedForRestart]: \"green\",\r\n};\r\n\r\ninterface TimeDisplayProps {\r\n  seconds: number;\r\n  state: TimeDisplayState;\r\n}\r\n\r\ninterface TimeDisplay {\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n}\r\n\r\nconst getTimeDisplay = (seconds: number): TimeDisplay => {\r\n  let secondsRemaining = seconds;\r\n\r\n  const hours = ~~(secondsRemaining / 3600);\r\n  secondsRemaining = secondsRemaining % 3600;\r\n\r\n  const minutes = ~~(secondsRemaining / 60);\r\n  secondsRemaining = secondsRemaining % 60;\r\n\r\n  return {\r\n    hours,\r\n    minutes,\r\n    seconds: secondsRemaining,\r\n  };\r\n};\r\n\r\nconst getNumberDisplay = (value: number): string | number => {\r\n  return value < 10 ? `0${value}` : value;\r\n};\r\n\r\nconst getTimeDisplayString = (timeDisplay: TimeDisplay): string => {\r\n  const displayString = `${getNumberDisplay(\r\n    timeDisplay.minutes\r\n  )}:${getNumberDisplay(timeDisplay.seconds)}`;\r\n  if (timeDisplay.hours > 0) {\r\n    return `${getNumberDisplay(timeDisplay.hours)}:` + displayString;\r\n  }\r\n  return displayString;\r\n};\r\n\r\nconst TimeDisplay = ({ seconds, state }: TimeDisplayProps): JSX.Element => {\r\n  const timeDisplay = useMemo(\r\n    () => getTimeDisplayString(getTimeDisplay(seconds)),\r\n    [seconds]\r\n  );\r\n  return (\r\n    <Heading size=\"3xl\" color={timeDisplayStateToColor[state]}>\r\n      {timeDisplay}\r\n    </Heading>\r\n  );\r\n};\r\n\r\nexport default TimeDisplay;\r\n","import React from \"react\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport { MdPause, MdPlayArrow } from \"react-icons/md\";\r\n\r\ninterface PlayStopButtonProps {\r\n  stopped: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nconst ICON_SIZE = 90;\r\n\r\nconst PlayStopButton = ({\r\n  stopped,\r\n  onClick,\r\n}: PlayStopButtonProps): JSX.Element => {\r\n  return (\r\n    <Box onClick={onClick}>\r\n      {stopped ? (\r\n        <MdPlayArrow size={ICON_SIZE} />\r\n      ) : (\r\n        <MdPause size={ICON_SIZE} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PlayStopButton;\r\n","import React from \"react\";\r\nimport { Box, Button } from \"@chakra-ui/react\";\r\nimport { MdOutlineRestore } from \"react-icons/md\";\r\n\r\ninterface RestartButtonProps {\r\n  onClick: () => void;\r\n  buttonText?: string;\r\n}\r\n\r\nconst ICON_SIZE = 20;\r\n\r\nconst RestartButton = ({\r\n  onClick,\r\n  buttonText = \"Restart\",\r\n}: RestartButtonProps): JSX.Element => {\r\n  return (\r\n    <Box onClick={onClick}>\r\n      <Button bg=\"blue.100\" leftIcon={<MdOutlineRestore size={ICON_SIZE} />}>\r\n        {buttonText}\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RestartButton;\r\n","import React from \"react\";\r\nimport { Box, Button } from \"@chakra-ui/react\";\r\nimport { MdOutlineSettingsBackupRestore } from \"react-icons/md\";\r\n\r\ninterface RestartPlusButtonProps {\r\n  onClick: () => void;\r\n  buttonText?: string;\r\n}\r\n//TiPlus\r\nconst ICON_SIZE = 20;\r\n\r\nconst RestartPlusButton = ({\r\n  onClick,\r\n  buttonText = \"Complete\",\r\n}: RestartPlusButtonProps): JSX.Element => {\r\n  return (\r\n    <Box onClick={onClick}>\r\n      <Button\r\n        bg=\"blue.100\"\r\n        leftIcon={<MdOutlineSettingsBackupRestore size={ICON_SIZE} />}\r\n      >\r\n        {buttonText}\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RestartPlusButton;\r\n","import React from \"react\";\r\nimport { Box, Button } from \"@chakra-ui/react\";\r\nimport { TiPlus } from \"react-icons/ti\";\r\n\r\ninterface PlusButtonProps {\r\n  onClick: () => void;\r\n  buttonText?: string;\r\n}\r\n\r\nconst ICON_SIZE = 20;\r\n\r\nconst PlusButton = ({\r\n  onClick,\r\n  buttonText = \"Complete\",\r\n}: PlusButtonProps): JSX.Element => {\r\n  return (\r\n    <Box onClick={onClick}>\r\n      <Button bg=\"blue.100\" leftIcon={<TiPlus size={ICON_SIZE} />}>\r\n        {buttonText}\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PlusButton;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  BiVolume,\r\n  BiVolumeFull,\r\n  BiVolumeLow,\r\n  BiVolumeMute,\r\n} from \"react-icons/bi\";\r\n\r\ninterface MuteButtonProps {\r\n  muted: boolean;\r\n  volume: number; // 0 to 1\r\n  color?: string;\r\n  hoverColor?: string;\r\n  size?: number;\r\n  onClick: () => void;\r\n}\r\n\r\nconst MuteButton = ({\r\n  muted,\r\n  volume,\r\n  onClick,\r\n  color = \"white\",\r\n  hoverColor = \"#dddddd\",\r\n  size = 40,\r\n}: MuteButtonProps): JSX.Element => {\r\n  const [volumeIconColor, setVolumeIconColor] = useState(color);\r\n\r\n  const iconProps = {\r\n    color: volumeIconColor,\r\n    size,\r\n    onMouseEnter: () => setVolumeIconColor(hoverColor),\r\n    onMouseLeave: () => setVolumeIconColor(color),\r\n    onClick,\r\n  };\r\n\r\n  if (muted) return <BiVolumeMute {...iconProps} />;\r\n  if (volume == 0) return <BiVolume {...iconProps} />;\r\n  if (volume < 0.5) return <BiVolumeLow {...iconProps} />;\r\n  return <BiVolumeFull {...iconProps} />;\r\n};\r\n\r\nexport default MuteButton;\r\n","import React from \"react\";\r\nimport { CounterTimer } from \"../../logic/Timer\";\r\nimport \"./timer.css\";\r\nimport useCounterTimer from \"../../logic/hooks/useCounterTimer\";\r\nimport {\r\n  Button,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Spacer,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport TimeDisplay, { TimeDisplayState } from \"../../components/TimeDisplay\";\r\nimport { GrPlay, GrPause } from \"react-icons/gr\";\r\nimport PlayStopButton from \"../../components/Buttons/PlayStopButton\";\r\nimport RestartButton from \"../../components/Buttons/RestartButton\";\r\nimport RestartPlusButton from \"../../components/Buttons/RestartPlusButton\";\r\nimport PlusButton from \"../../components/Buttons/PlusButton\";\r\nimport MuteButton from \"../../components/MuteButton\";\r\n\r\ninterface CounterTimerRendererProps {\r\n  timer: CounterTimer;\r\n  timerId: string;\r\n}\r\n\r\nconst MUTE_BUTTON_SIZE = 60;\r\n\r\nconst CounterTimerRenderer = ({\r\n  timer,\r\n  timerId,\r\n}: CounterTimerRendererProps): JSX.Element => {\r\n  const state = useCounterTimer(timerId, timer);\r\n\r\n  return (\r\n    <div className=\"timerWrapper\">\r\n      <Flex width=\"100%\">\r\n        <MuteButton\r\n          muted={state.muted}\r\n          volume={1}\r\n          onClick={() => state.setMuted(!state.muted)}\r\n          size={MUTE_BUTTON_SIZE}\r\n          color=\"#dddddd\"\r\n          hoverColor=\"#888888\"\r\n        />\r\n        <Spacer />\r\n        <Heading size=\"lg\" ml={`-${MUTE_BUTTON_SIZE}px`}>\r\n          {timer.title}\r\n        </Heading>\r\n        <Spacer />\r\n        <div />\r\n      </Flex>\r\n      <Heading\r\n        size=\"md\"\r\n        color=\"gray.500\"\r\n        fontWeight=\"semibold\"\r\n        letterSpacing=\"wide\"\r\n      >\r\n        Completed {state.timesCompleted} times today\r\n      </Heading>\r\n      <TimeDisplay\r\n        seconds={state.secondsRemaining}\r\n        state={\r\n          state.stopped\r\n            ? TimeDisplayState.Stopped\r\n            : state.markedForRestart\r\n            ? TimeDisplayState.MarkedForRestart\r\n            : TimeDisplayState.Normal\r\n        }\r\n      />\r\n\r\n      <Stack direction=\"column\" spacing=\"1rem\" align=\"center\">\r\n        <PlayStopButton\r\n          stopped={state.stopped}\r\n          onClick={() => state.setStopped(!state.stopped)}\r\n        />\r\n        {/* Complete buttons */}\r\n        <Stack direction=\"row\">\r\n          {state.secondsRemaining > 0 && (\r\n            <PlusButton onClick={state.complete} />\r\n          )}\r\n          <RestartPlusButton onClick={state.completeAndRestart} />\r\n          {state.secondsRemaining > 0 && (\r\n            <RestartButton\r\n              onClick={state.completeAndMarkForRestart}\r\n              buttonText=\"Complete and Autorestart\"\r\n            />\r\n          )}\r\n        </Stack>\r\n        {/* Restart buttons */}\r\n        <RestartButton onClick={state.restart} />\r\n      </Stack>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CounterTimerRenderer;\r\n","import { useMemo, useState } from \"react\";\r\nimport useInterval from \"../logic/hooks/useInterval\";\r\nimport { useAppSelector } from \"../store\";\r\n\r\ninterface UseTimerFlashingStateResponse {\r\n  flashing: boolean;\r\n  bgColor: string;\r\n}\r\n\r\nconst NON_FLASH_COLOR = \"gray.100\";\r\nconst FLASH_COLOR = \"yellow.200\";\r\nconst FLASH_INTERVAL = 200;\r\n\r\nexport default function useTimerFlashingState(\r\n  key: string\r\n): UseTimerFlashingStateResponse {\r\n  const timersState = useAppSelector((state) => state.timers);\r\n\r\n  const [bgColor, setBgColor] = useState(NON_FLASH_COLOR);\r\n\r\n  const flashing = useMemo(() => {\r\n    if (!(key in timersState)) return true;\r\n    return timersState[key].stopped ? false : timersState[key].flashing;\r\n  }, [timersState, key]);\r\n\r\n  useInterval(() => {\r\n    if (flashing) {\r\n      setBgColor(bgColor === NON_FLASH_COLOR ? FLASH_COLOR : NON_FLASH_COLOR);\r\n    } else if (bgColor !== NON_FLASH_COLOR) {\r\n      setBgColor(NON_FLASH_COLOR);\r\n    }\r\n  }, FLASH_INTERVAL);\r\n\r\n  return { flashing, bgColor };\r\n}\r\n","import React from \"react\";\r\nimport { Box, Container } from \"@chakra-ui/react\";\r\nimport { CounterTimer, Timer, TimerType } from \"../../logic/Timer\";\r\nimport CounterTimerRenderer from \"./CounterTimerRenderer\";\r\nimport \"./timer.css\";\r\nimport useTimerFlashingState from \"../../state/useTimerFlashingState\";\r\n\r\ninterface TimerRendererProps {\r\n  timer: Timer;\r\n  timerId: string;\r\n}\r\n\r\nconst TimerRenderer = ({ timer, timerId }: TimerRendererProps): JSX.Element => {\r\n  const { bgColor } = useTimerFlashingState(timerId);\r\n\r\n  if (timer.type === TimerType.CounterTimer) {\r\n    return (\r\n      <Container maxW=\"container.xl\">\r\n        <Box\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          className=\"timer\"\r\n          bg={bgColor}\r\n          p=\"1rem\"\r\n        >\r\n          <CounterTimerRenderer\r\n            timer={timer as CounterTimer}\r\n            timerId={timerId}\r\n          />\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n  return <div className=\"timer\">Invalid renderer for {timer.title}</div>;\r\n};\r\n\r\nexport default TimerRenderer;\r\n","import React from \"react\";\r\nimport {\r\n  Slider,\r\n  SliderFilledTrack,\r\n  SliderMark,\r\n  SliderThumb,\r\n  SliderTrack,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\n\r\ninterface AudioSliderProps {\r\n  value: number;\r\n  setValue: (value: number) => void;\r\n  disabled: boolean;\r\n}\r\n\r\nconst AudioSlider = ({\r\n  value,\r\n  setValue,\r\n  disabled,\r\n}: AudioSliderProps): JSX.Element => {\r\n  const [showTooltip, setShowTooltip] = React.useState(false);\r\n  console.log(`audio slider w value: ${value}`);\r\n  return (\r\n    <Slider\r\n      aria-label=\"slider-ex-6\"\r\n      onChange={(val) => setValue(val)}\r\n      width=\"10rem\"\r\n      onMouseEnter={() => setShowTooltip(true)}\r\n      onMouseLeave={() => setShowTooltip(false)}\r\n      isReversed\r\n      isDisabled={disabled}\r\n    >\r\n      <SliderMark\r\n        value={value}\r\n        textAlign=\"center\"\r\n        bg=\"blue.500\"\r\n        color=\"white\"\r\n        mt=\"-10\"\r\n        ml=\"-5\"\r\n        w=\"12\"\r\n        placement\r\n      ></SliderMark>\r\n      <SliderTrack bg=\"white\">\r\n        <SliderFilledTrack bg=\"blue.500\" />\r\n      </SliderTrack>\r\n      <Tooltip\r\n        hasArrow\r\n        bg=\"teal.500\"\r\n        color=\"white\"\r\n        placement=\"top\"\r\n        isOpen={showTooltip}\r\n        label={`${Math.round(value)}%`}\r\n      >\r\n        <SliderThumb />\r\n      </Tooltip>\r\n    </Slider>\r\n  );\r\n};\r\n\r\nexport default AudioSlider;\r\n","import { useCallback } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../store\";\r\nimport audioSlice from \"./audioSlice\";\r\n\r\ninterface UseAudioStateResponse {\r\n  muted: boolean;\r\n  setMuted: (muted: boolean) => void;\r\n  volume: number; // between 0 and 1\r\n  setVolume: (volume: number) => void;\r\n}\r\n\r\nconst actions = audioSlice.actions;\r\n\r\nexport default function useAudioState(): UseAudioStateResponse {\r\n  const state = useAppSelector((state) => state.audio);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const setMuted = useCallback(\r\n    (muted: boolean) => dispatch(actions.setMuted(muted)),\r\n    [dispatch]\r\n  );\r\n\r\n  const setVolume = useCallback(\r\n    (volume: number) => dispatch(actions.setVolume(volume)),\r\n    [dispatch]\r\n  );\r\n\r\n  return {\r\n    muted: state.muted,\r\n    setMuted,\r\n    volume: state.volume,\r\n    setVolume,\r\n  };\r\n}\r\n","import React, { useState } from \"react\";\r\nimport AudioSlider from \"../../components/AudioSlider\";\r\nimport useAudioState from \"../../state/useAudioState\";\r\nimport {\r\n  BiVolume,\r\n  BiVolumeFull,\r\n  BiVolumeLow,\r\n  BiVolumeMute,\r\n} from \"react-icons/bi\";\r\nimport { Stack } from \"@chakra-ui/react\";\r\nimport MuteButton from \"../../components/MuteButton\";\r\n\r\nconst HeaderAudioSlider = (): JSX.Element => {\r\n  const { volume, setVolume, muted, setMuted } = useAudioState();\r\n  const [volumeIconColor, setVolumeIconColor] = useState(\"white\");\r\n\r\n  const iconProps = {\r\n    color: volumeIconColor,\r\n    size: 40,\r\n    onMouseEnter: () => setVolumeIconColor(\"#dddddd\"),\r\n    onMouseLeave: () => setVolumeIconColor(\"white\"),\r\n    onClick: () => setMuted(!muted),\r\n  };\r\n\r\n  return (\r\n    <Stack direction=\"row\" align=\"center\">\r\n      <AudioSlider\r\n        value={volume * 100}\r\n        setValue={(value: number) => setVolume(value / 100)}\r\n        disabled={muted}\r\n      />\r\n      <MuteButton\r\n        muted={muted}\r\n        volume={volume}\r\n        onClick={() => setMuted(!muted)}\r\n      />\r\n      <div style={{ marginRight: \"1rem\" }} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default HeaderAudioSlider;\r\n","import React from \"react\";\r\nimport { Box, Stack, Heading, Flex, Spacer } from \"@chakra-ui/layout\";\r\nimport { Button, Icon } from \"@chakra-ui/react\";\r\nimport { FaRegClock } from \"react-icons/fa\";\r\nimport \"./header.css\";\r\nimport HeaderAudioSlider from \"./HeaderAudioSlider\";\r\n\r\ninterface HeaderProps {\r\n  startAllTimers: () => void;\r\n  stopAllTimers: () => void;\r\n}\r\n\r\nconst Header = ({\r\n  startAllTimers,\r\n  stopAllTimers,\r\n}: HeaderProps): JSX.Element => {\r\n  return (\r\n    <Box bg=\"tomato\" w=\"100%\">\r\n      <Flex width=\"100%\">\r\n        <Stack\r\n          direction=\"row\"\r\n          spacing=\"1rem\"\r\n          ml=\"1rem\"\r\n          pt=\"5px\"\r\n          pb=\"5px\"\r\n          align=\"center\"\r\n        >\r\n          <FaRegClock size={40} color=\"white\" />\r\n          <Heading size=\"xl\" color=\"white\">\r\n            Timers Lesgooo\r\n          </Heading>\r\n          <Button bg=\"blue.100\" onClick={startAllTimers}>\r\n            Start All\r\n          </Button>\r\n          <Button bg=\"blue.100\" onClick={stopAllTimers}>\r\n            Stop All\r\n          </Button>\r\n        </Stack>\r\n        <Spacer />\r\n        <HeaderAudioSlider />\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useCallback } from \"react\";\r\nimport { useAppDispatch } from \"../store\";\r\nimport timersSlice from \"./timersSlice\";\r\n\r\ninterface UseGlobalTimersStateResponse {\r\n  addTimers: (count: number) => void;\r\n  startAllTimers: () => void;\r\n  stopAllTimers: () => void;\r\n}\r\n\r\nconst actions = timersSlice.actions;\r\n\r\nexport default function useGlobalTimersState(): UseGlobalTimersStateResponse {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const addTimers = useCallback(\r\n    (count: number) => {\r\n      for (let i = 0; i < count; i++) {\r\n        console.log(`Adding timer ${i}`);\r\n        dispatch(actions.addTimer(`${i}`));\r\n      }\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const startAllTimers = useCallback(\r\n    () => dispatch(actions.startAllTimers()),\r\n    [dispatch]\r\n  );\r\n\r\n  const stopAllTimers = useCallback(\r\n    () => dispatch(actions.stopAllTimers()),\r\n    [dispatch]\r\n  );\r\n\r\n  return {\r\n    addTimers,\r\n    startAllTimers,\r\n    stopAllTimers,\r\n  };\r\n}\r\n","export default __webpack_public_path__ + \"static/media/beep.c21038da.mp3\";","import { useEffect, useMemo, useState } from \"react\";\r\nimport useInterval from \"../logic/hooks/useInterval\";\r\nimport { useAppSelector } from \"../store\";\r\nimport { TimersState } from \"./timersSlice\";\r\nimport file from \"./beep.mp3\";\r\nimport useAudioState from \"./useAudioState\";\r\n\r\ninterface UseBeepingResponse {}\r\n\r\nconst shouldBeep = (state: TimersState): boolean => {\r\n  const states = Object.keys(state).map((key: string) => state[key]);\r\n  for (let i = 0; i < states.length; i++) {\r\n    if (states[i].flashing && !states[i].stopped && !states[i].muted)\r\n      return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst BEEPING_INTERVAL = 1000;\r\n\r\nexport default function useBeeping(): void {\r\n  const timersState = useAppSelector((state) => state.timers);\r\n  const anyFlashing = useMemo(() => shouldBeep(timersState), [timersState]);\r\n\r\n  const { muted, volume } = useAudioState();\r\n\r\n  const [audio] = useState(new Audio(file));\r\n\r\n  useEffect(() => {\r\n    if (muted) {\r\n      audio.volume = 0;\r\n    } else {\r\n      audio.volume = volume;\r\n    }\r\n  }, [audio, muted, volume]);\r\n\r\n  useInterval(() => {\r\n    if (anyFlashing) {\r\n      audio.play();\r\n    }\r\n  }, BEEPING_INTERVAL);\r\n}\r\n","import React, { useEffect } from \"react\";\nimport { SimpleGrid } from \"@chakra-ui/layout\";\nimport \"./App.css\";\nimport TimerRenderer from \"./layout/timer/TimerRenderer\";\nimport { CounterTimer, Timer, TimerMap, TimerType } from \"./logic/Timer\";\nimport Header from \"./layout/header/Header\";\nimport useGlobalTimersState from \"./state/useGlobalTimersState\";\nimport useBeeping from \"./state/useBeeping\";\n\nconst waterTimer: CounterTimer = {\n  type: TimerType.CounterTimer,\n  title: \"Drink 1/2 Hydroflask\",\n  durationInSeconds: 5,\n};\n\nconst timers: TimerMap = {\n  waterTimer: waterTimer,\n  waterTimer2: waterTimer,\n};\nconst timersList = Object.values(timers);\n\nconst App = (): JSX.Element => {\n  const { addTimers, startAllTimers, stopAllTimers } = useGlobalTimersState();\n  useEffect(() => {\n    addTimers(timersList.length);\n  }, [addTimers, timersList]);\n\n  useBeeping();\n\n  return (\n    <>\n      <Header startAllTimers={startAllTimers} stopAllTimers={stopAllTimers} />\n      <SimpleGrid minChildWidth=\"500px\" spacing=\"40px\" marginTop=\"1rem\">\n        {timersList.map((timer, i) => (\n          <TimerRenderer timer={timer} timerId={`${i}`} />\n        ))}\n      </SimpleGrid>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}