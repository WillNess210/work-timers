{"version":3,"sources":["logic/Timer.ts","logic/hooks/useInterval.ts","state/audioSlice.ts","state/timersSlice.ts","rootReducer.ts","store.ts","state/useTimerState.ts","logic/hooks/useTimer.ts","logic/hooks/useCountdownTimer.ts","components/TimeDisplay.tsx","components/Buttons/PlayStopButton.tsx","components/Buttons/RestartButton.tsx","components/Buttons/RestartPlusButton.tsx","components/Buttons/PlusButton.tsx","components/MuteButton.tsx","components/TimerHeader.tsx","components/Font/Subtitle.tsx","layout/timer/CounterTimerRenderer.tsx","logic/hooks/useCounterTimer.ts","state/useTimerFlashingState.ts","layout/timer/StopwatchTimerRenderer.tsx","components/Buttons/NextButton.tsx","logic/hooks/useMultiStateTimer.ts","layout/timer/MultiStateTimerRenderer.tsx","layout/timer/TimerRenderer.tsx","components/AudioSlider.tsx","state/useAudioState.ts","layout/header/HeaderAudioSlider.tsx","layout/header/Header.tsx","state/useGlobalTimersState.ts","state/beep.mp3","state/useBeeping.ts","App.tsx","reportWebVitals.js","index.js"],"names":["TimerType","useInterval","callback","delayInMs","callbackRef","useRef","useEffect","current","interval","setInterval","clearInterval","audioSlice","createSlice","name","initialState","muted","volume","reducers","setMuted","state","action","payload","setVolume","Math","min","max","defaultTimerState","seconds","stopped","flashing","timesCompleted","statesSeconds","timersSlice","addTimer","setTimerState","key","setTimerSeconds","value","setTimerStopped","setTimerTimesCompleted","setTimerFlashing","setTimerMuted","setStatesSeconds","setStatesSecondsAt","index","addStatesSecondsAt","startAllTimers","Object","keys","forEach","stopAllTimers","rootReducer","combineReducers","timers","reducer","audio","store","createStore","useAppDispatch","useDispatch","useAppSelector","useSelector","actions","useTimerState","onTick","dispatch","timerState","useMemo","undefined","useState","setSeconds","setStopped","currentSeconds","useTimer","timerStopped","setReduxSeconds","useCallback","setFlashing","incrementTimesCompleted","useCountdownTimer","durationInSeconds","useTimerStateResponse","previousFinishedTimestamp","setPreviousFinishedTimestamp","markedForRestart","setMarkedForRestart","resetTimer","incrementTimesCompletedCallback","secondsRemainingCalculation","calculation","secondsRemaining","resetTimerAndStop","resetTimerAndStart","TimeDisplayState","timeDisplayStateToColor","Normal","Stopped","MarkedForRestart","Active","getNumberDisplay","TimeDisplay","size","heading","headingColor","timeDisplayString","timeDisplay","displayString","minutes","hours","getTimeDisplayString","getTimeDisplay","timeDisplayElement","color","align","PlayStopButton","onClick","RestartButton","buttonText","bg","leftIcon","RestartPlusButton","PlusButton","MuteButton","hoverColor","volumeIconColor","setVolumeIconColor","iconProps","onMouseEnter","onMouseLeave","TimerHeader","title","muteButtonProps","subTitle","width","ml","fontWeight","letterSpacing","Subtitle","text","CounterTimerRenderer","timer","completeAndRestart","completeAndMarkForRestart","complete","restart","useCounterTimer","timerId","height","direction","spacing","marginTop","NON_FLASH_COLOR","StopwatchTimerRenderer","justifyContent","NextButton","MultiStateTimerRenderer","states","currentStateIndex","setCurrentStateIndex","currentState","addSecondsToCurrentState","incrementBy","countdownState","getNextStateIndex","length","nextStateTitle","moveToNextState","statesResponse","map","multiTimerState","i","totalSeconds","currentIndex","currentTitle","useMultiStateTimer","stateState","TimerContainer","children","timersState","bgColor","setBgColor","useTimerFlashingState","maxW","borderWidth","borderRadius","className","p","TimerRenderer","type","CounterTimer","Stopwatch","MultiStateTimer","AudioSlider","setValue","disabled","React","showTooltip","setShowTooltip","onChange","val","isReversed","isDisabled","textAlign","mt","w","hasArrow","placement","isOpen","label","round","useAudioState","HeaderAudioSlider","style","marginRight","Header","pt","pb","useBeeping","anyFlashing","shouldBeep","Audio","file","play","waterTimer","officeTimer","standingTimer","breakTimer","timersList","values","App","addTimers","count","console","log","useGlobalTimersState","minChildWidth","marginBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","noSleep","NoSleep","document","addEventListener","enableNoSleep","enable","removeEventListener","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eddff257.chunk.js","sourcesContent":["export enum TimerType {\r\n  CounterTimer,\r\n  MultiStateTimer,\r\n  Stopwatch,\r\n}\r\n\r\nexport interface Timer {\r\n  type: TimerType;\r\n  title: string;\r\n}\r\n\r\nexport type TimerMap = { [key: string]: Timer };\r\n\r\nexport interface CounterTimer extends Timer {\r\n  type: TimerType.CounterTimer;\r\n  durationInSeconds: number;\r\n}\r\n\r\nexport interface StopwatchTimer extends Timer {\r\n  type: TimerType.Stopwatch;\r\n}\r\n\r\nexport interface TimerState {\r\n  title: string;\r\n  durationInSeconds: number;\r\n}\r\n\r\nexport interface MultiStateTimer extends Timer {\r\n  type: TimerType.MultiStateTimer;\r\n  states: TimerState[];\r\n  // TODO keepInitialRatio: boolean; // calculates ratio between each timer state and if you go over or switch early, it increases/decreases other times\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport default function useInterval(\r\n  callback: () => void,\r\n  delayInMs: number\r\n): void {\r\n  const callbackRef = useRef(callback);\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (!delayInMs) {\r\n      return () => {};\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      const current = callbackRef.current as undefined | (() => void);\r\n      current && current();\r\n    }, delayInMs);\r\n    return () => clearInterval(interval);\r\n  }, [delayInMs]);\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface AudioState {\r\n  muted: boolean;\r\n  volume: number; // between 0 and 1\r\n}\r\n\r\nconst initialState: AudioState = {\r\n  muted: false,\r\n  volume: 0.5,\r\n};\r\n\r\nconst audioSlice = createSlice({\r\n  name: \"audio\",\r\n  initialState,\r\n  reducers: {\r\n    setMuted: (state, action: PayloadAction<boolean>) => {\r\n      state.muted = action.payload;\r\n    },\r\n    setVolume: (state, action: PayloadAction<number>) => {\r\n      state.volume = Math.min(Math.max(0, action.payload), 1);\r\n    },\r\n  },\r\n});\r\n\r\nexport default audioSlice;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface TimerState {\r\n  seconds: number;\r\n  stopped: boolean;\r\n  flashing: boolean;\r\n  // any timers with audio\r\n  muted: boolean;\r\n  // counter timer specific\r\n  timesCompleted: number;\r\n  // multi state timer specific\r\n  statesSeconds: number[];\r\n}\r\n\r\nexport interface TimersState {\r\n  [key: string]: TimerState;\r\n}\r\n\r\nconst defaultTimerState: TimerState = {\r\n  seconds: 0,\r\n  stopped: true,\r\n  flashing: false,\r\n  muted: false,\r\n  timesCompleted: 0,\r\n  statesSeconds: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n};\r\n\r\nconst initialState: TimersState = {};\r\n\r\nconst timersSlice = createSlice({\r\n  name: \"timers\",\r\n  initialState,\r\n  reducers: {\r\n    // adding timer\r\n    addTimer: (state, action: PayloadAction<string>) => {\r\n      state[action.payload] = { ...defaultTimerState };\r\n    },\r\n    // individual timer actions\r\n    setTimerState: (\r\n      state,\r\n      action: PayloadAction<{ key: string; state: TimerState }>\r\n    ) => {\r\n      state[action.payload.key] = action.payload.state;\r\n    },\r\n    setTimerSeconds: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: number }>\r\n    ) => {\r\n      state[action.payload.key].seconds = action.payload.value;\r\n    },\r\n    setTimerStopped: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: boolean }>\r\n    ) => {\r\n      state[action.payload.key].stopped = action.payload.value;\r\n    },\r\n    setTimerTimesCompleted: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: number }>\r\n    ) => {\r\n      state[action.payload.key].timesCompleted = action.payload.value;\r\n    },\r\n    setTimerFlashing: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: boolean }>\r\n    ) => {\r\n      state[action.payload.key].flashing = action.payload.value;\r\n    },\r\n    setTimerMuted: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: boolean }>\r\n    ) => {\r\n      state[action.payload.key].muted = action.payload.value;\r\n    },\r\n    setStatesSeconds: (\r\n      state,\r\n      action: PayloadAction<{ key: string; value: number[] }>\r\n    ) => {\r\n      state[action.payload.key].statesSeconds = action.payload.value;\r\n    },\r\n    setStatesSecondsAt: (\r\n      state,\r\n      action: PayloadAction<{ key: string; index: number; value: number }>\r\n    ) => {\r\n      state[action.payload.key].statesSeconds[action.payload.index] =\r\n        action.payload.value;\r\n    },\r\n    addStatesSecondsAt: (\r\n      state,\r\n      action: PayloadAction<{ key: string; index: number; value: number }>\r\n    ) => {\r\n      state[action.payload.key].statesSeconds[action.payload.index] +=\r\n        action.payload.value;\r\n    },\r\n    // all timer actions\r\n    startAllTimers: (state) => {\r\n      const keys = Object.keys(state);\r\n      keys.forEach((key: string) => {\r\n        state[key].stopped = false;\r\n      });\r\n    },\r\n    stopAllTimers: (state) => {\r\n      const keys = Object.keys(state);\r\n      keys.forEach((key: string) => {\r\n        state[key].stopped = true;\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport default timersSlice;\r\n","import { combineReducers } from \"redux\";\r\nimport audioSlice from \"./state/audioSlice\";\r\nimport timersSlice from \"./state/timersSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  timers: timersSlice.reducer,\r\n  audio: audioSlice.reducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport default store;\r\n","import { useCallback, useEffect, useMemo } from \"react\";\r\nimport useTimer from \"../logic/hooks/useTimer\";\r\nimport { useAppDispatch, useAppSelector } from \"../store\";\r\nimport timersSlice, { TimerState } from \"./timersSlice\";\r\n\r\nexport interface UseTimerStateResponse {\r\n  timerState: TimerState | undefined;\r\n  seconds: number;\r\n  stopped: boolean;\r\n  setStopped: (stopped: boolean) => void;\r\n  flashing: boolean;\r\n  setFlashing: (flashing: boolean) => void;\r\n  muted: boolean;\r\n  setMuted: (muted: boolean) => void;\r\n  incrementTimesCompleted: () => void;\r\n}\r\n\r\nconst actions = timersSlice.actions;\r\n\r\nexport default function useTimerState(\r\n  key: string,\r\n  onTick?: () => void\r\n): UseTimerStateResponse {\r\n  const state = useAppSelector((state) => state.timers);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const timerState = useMemo(\r\n    () => (key in state ? state[key] : undefined),\r\n    [state, key]\r\n  );\r\n\r\n  const {\r\n    currentSeconds,\r\n    stopped: timerStopped,\r\n    setStopped: setTimerStopped,\r\n  } = useTimer(onTick);\r\n\r\n  const setReduxSeconds = useCallback(\r\n    (seconds: number) => {\r\n      if (timerState) {\r\n        dispatch(actions.setTimerSeconds({ key, value: seconds }));\r\n      }\r\n    },\r\n    [key, timerState, dispatch]\r\n  );\r\n\r\n  const setStopped = useCallback(\r\n    (stopped: boolean) => {\r\n      if (timerState) {\r\n        dispatch(actions.setTimerStopped({ key, value: stopped }));\r\n      }\r\n    },\r\n    [key, timerState, dispatch]\r\n  );\r\n\r\n  const setFlashing = useCallback(\r\n    (flashing: boolean) => {\r\n      if (timerState) {\r\n        dispatch(actions.setTimerFlashing({ key, value: flashing }));\r\n      }\r\n    },\r\n    [key, timerState, dispatch]\r\n  );\r\n\r\n  const setMuted = useCallback(\r\n    (muted: boolean) => {\r\n      if (timerState) {\r\n        dispatch(actions.setTimerMuted({ key, value: muted }));\r\n      }\r\n    },\r\n    [key, timerState, dispatch]\r\n  );\r\n\r\n  const incrementTimesCompleted = useCallback(() => {\r\n    if (timerState) {\r\n      dispatch(\r\n        actions.setTimerTimesCompleted({\r\n          key,\r\n          value: timerState.timesCompleted + 1,\r\n        })\r\n      );\r\n    }\r\n  }, [key, timerState, dispatch]);\r\n\r\n  // if timerState.stopped changes, call setTimerStopped from useTimer\r\n  useEffect(() => {\r\n    if (timerState && timerState.stopped !== timerStopped) {\r\n      setTimerStopped(timerState.stopped);\r\n    }\r\n  }, [timerState, timerStopped, setTimerStopped]);\r\n\r\n  // if currentSeconds changes, call setReduxSeconds\r\n  useEffect(() => {\r\n    if (timerState && currentSeconds !== timerState.seconds)\r\n      setReduxSeconds(currentSeconds);\r\n  }, [timerState, currentSeconds, setReduxSeconds]);\r\n\r\n  return {\r\n    timerState,\r\n    seconds: timerState ? timerState.seconds : -1,\r\n    stopped: timerState ? timerState.stopped : true,\r\n    flashing: timerState ? timerState.flashing : true,\r\n    muted: timerState ? timerState.muted : true,\r\n    setStopped,\r\n    setFlashing,\r\n    setMuted,\r\n    incrementTimesCompleted,\r\n  };\r\n}\r\n","import { useState } from \"react\";\r\nimport useInterval from \"./useInterval\";\r\n\r\nexport interface UseTimerResponse {\r\n  currentSeconds: number;\r\n  stopped: boolean;\r\n  setStopped: (stopped: boolean) => void;\r\n}\r\n\r\nexport default function useTimer(onTick?: () => void): UseTimerResponse {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [stopped, setStopped] = useState(true);\r\n\r\n  useInterval(() => {\r\n    if (!stopped) {\r\n      setSeconds(seconds + 1);\r\n      if (onTick) {\r\n        onTick();\r\n      }\r\n    }\r\n  }, 1000);\r\n\r\n  return {\r\n    currentSeconds: seconds,\r\n    stopped,\r\n    setStopped,\r\n  };\r\n}\r\n","import { useCallback, useMemo, useState } from \"react\";\r\nimport useTimerState, {\r\n  UseTimerStateResponse,\r\n} from \"../../state/useTimerState\";\r\n\r\ninterface UseCountdownTimerResponse\r\n  extends Omit<UseTimerStateResponse, \"seconds\"> {\r\n  secondsRemaining: number;\r\n  markedForRestart: boolean;\r\n  resetTimer: () => void;\r\n  resetTimerAndStop: () => void;\r\n  resetTimerAndStart: () => void;\r\n  setMarkedForRestart: () => void;\r\n}\r\n\r\nexport default function useCountdownTimer(\r\n  key: string,\r\n  durationInSeconds: number,\r\n  onTick?: () => void\r\n): UseCountdownTimerResponse {\r\n  const useTimerStateResponse = useTimerState(key, onTick);\r\n  const {\r\n    timerState,\r\n    stopped,\r\n    seconds,\r\n    flashing,\r\n    setStopped,\r\n    setFlashing,\r\n    incrementTimesCompleted,\r\n  } = useTimerStateResponse;\r\n\r\n  const [previousFinishedTimestamp, setPreviousFinishedTimestamp] = useState(0);\r\n  const [markedForRestart, setMarkedForRestart] = useState(false);\r\n\r\n  const resetTimer = useCallback(() => {\r\n    setPreviousFinishedTimestamp(seconds);\r\n    setFlashing(false);\r\n  }, [setPreviousFinishedTimestamp, seconds, setFlashing]);\r\n\r\n  const incrementTimesCompletedCallback = useCallback(() => {\r\n    incrementTimesCompleted();\r\n    setFlashing(false);\r\n  }, [incrementTimesCompleted, setFlashing]);\r\n\r\n  const secondsRemainingCalculation = useMemo(() => {\r\n    if (timerState) {\r\n      const calculation =\r\n        durationInSeconds - (timerState.seconds - previousFinishedTimestamp);\r\n      if (calculation <= 0 && !flashing && !markedForRestart) {\r\n        setFlashing(true);\r\n      } else if (calculation <= 0 && markedForRestart) {\r\n        setMarkedForRestart(false);\r\n        resetTimer();\r\n      }\r\n      return calculation;\r\n    }\r\n    return 99999999999999;\r\n  }, [\r\n    durationInSeconds,\r\n    timerState,\r\n    previousFinishedTimestamp,\r\n    markedForRestart,\r\n    flashing,\r\n    setMarkedForRestart,\r\n    resetTimer,\r\n    setFlashing,\r\n  ]);\r\n\r\n  const secondsRemaining = useMemo(() => {\r\n    if (timerState) {\r\n      return Math.max(0, secondsRemainingCalculation);\r\n    }\r\n    return -1;\r\n  }, [secondsRemainingCalculation, timerState]);\r\n\r\n  const resetTimerAndStop = useCallback(() => {\r\n    resetTimer();\r\n    setStopped(true);\r\n  }, [resetTimer, setStopped]);\r\n\r\n  const resetTimerAndStart = useCallback(() => {\r\n    resetTimer();\r\n    setStopped(false);\r\n  }, [resetTimer, setStopped]);\r\n\r\n  return {\r\n    ...useTimerStateResponse,\r\n    timerState,\r\n    secondsRemaining,\r\n    stopped,\r\n    markedForRestart,\r\n    setStopped,\r\n    setFlashing,\r\n    resetTimer,\r\n    resetTimerAndStop,\r\n    resetTimerAndStart,\r\n    incrementTimesCompleted: incrementTimesCompletedCallback,\r\n    setMarkedForRestart: () => setMarkedForRestart(true),\r\n  };\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { Heading, Stack } from \"@chakra-ui/react\";\r\n\r\nexport enum TimeDisplayState {\r\n  Normal,\r\n  Stopped,\r\n  MarkedForRestart,\r\n  Active,\r\n}\r\n\r\nconst timeDisplayStateToColor: { [stateValue in TimeDisplayState]: string } = {\r\n  [TimeDisplayState.Normal]: \"black\",\r\n  [TimeDisplayState.Stopped]: \"red\",\r\n  [TimeDisplayState.MarkedForRestart]: \"green\",\r\n  [TimeDisplayState.Active]: \"green\",\r\n};\r\n\r\ninterface TimeDisplayProps {\r\n  seconds: number;\r\n  state: TimeDisplayState;\r\n  size?: string;\r\n  heading?: string;\r\n  headingColor?: string;\r\n}\r\n\r\ninterface TimeDisplayValues {\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n}\r\n\r\nconst getTimeDisplay = (seconds: number): TimeDisplayValues => {\r\n  let secondsRemaining = seconds;\r\n\r\n  const hours = ~~(secondsRemaining / 3600);\r\n  secondsRemaining = secondsRemaining % 3600;\r\n\r\n  const minutes = ~~(secondsRemaining / 60);\r\n  secondsRemaining = secondsRemaining % 60;\r\n\r\n  return {\r\n    hours,\r\n    minutes,\r\n    seconds: secondsRemaining,\r\n  };\r\n};\r\n\r\nconst getNumberDisplay = (value: number): string | number => {\r\n  return value < 10 ? `0${value}` : value;\r\n};\r\n\r\nconst getTimeDisplayString = (timeDisplay: TimeDisplayValues): string => {\r\n  const displayString = `${getNumberDisplay(\r\n    timeDisplay.minutes\r\n  )}:${getNumberDisplay(timeDisplay.seconds)}`;\r\n  if (timeDisplay.hours > 0) {\r\n    return `${getNumberDisplay(timeDisplay.hours)}:` + displayString;\r\n  }\r\n  return displayString;\r\n};\r\n\r\nconst TimeDisplay = ({\r\n  seconds,\r\n  state,\r\n  size = \"3xl\",\r\n  heading,\r\n  headingColor = \"gray.500\",\r\n}: TimeDisplayProps): JSX.Element => {\r\n  const timeDisplayString = useMemo(\r\n    () => getTimeDisplayString(getTimeDisplay(seconds)),\r\n    [seconds]\r\n  );\r\n  const timeDisplayElement: JSX.Element = (\r\n    <Heading size={size} color={timeDisplayStateToColor[state]}>\r\n      {timeDisplayString}\r\n    </Heading>\r\n  );\r\n  if (!heading) {\r\n    return timeDisplayElement;\r\n  }\r\n\r\n  return (\r\n    <Stack align=\"center\">\r\n      <Heading size=\"md\" color={headingColor}>\r\n        {heading}\r\n      </Heading>\r\n      {timeDisplayElement}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default TimeDisplay;\r\n","import React from \"react\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport { MdPause, MdPlayArrow } from \"react-icons/md\";\r\n\r\ninterface PlayStopButtonProps {\r\n  stopped: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nconst ICON_SIZE = 90;\r\n\r\nconst PlayStopButton = ({\r\n  stopped,\r\n  onClick,\r\n}: PlayStopButtonProps): JSX.Element => {\r\n  return (\r\n    <Box onClick={onClick}>\r\n      {stopped ? (\r\n        <MdPlayArrow size={ICON_SIZE} />\r\n      ) : (\r\n        <MdPause size={ICON_SIZE} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PlayStopButton;\r\n","import React from \"react\";\r\nimport { Box, Button } from \"@chakra-ui/react\";\r\nimport { MdOutlineRestore } from \"react-icons/md\";\r\n\r\ninterface RestartButtonProps {\r\n  onClick: () => void;\r\n  buttonText?: string;\r\n}\r\n\r\nconst ICON_SIZE = 20;\r\n\r\nconst RestartButton = ({\r\n  onClick,\r\n  buttonText = \"Restart\",\r\n}: RestartButtonProps): JSX.Element => {\r\n  return (\r\n    <Box onClick={onClick}>\r\n      <Button bg=\"blue.100\" leftIcon={<MdOutlineRestore size={ICON_SIZE} />}>\r\n        {buttonText}\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RestartButton;\r\n","import React from \"react\";\r\nimport { Box, Button } from \"@chakra-ui/react\";\r\nimport { MdOutlineSettingsBackupRestore } from \"react-icons/md\";\r\n\r\ninterface RestartPlusButtonProps {\r\n  onClick: () => void;\r\n  buttonText?: string;\r\n}\r\n//TiPlus\r\nconst ICON_SIZE = 20;\r\n\r\nconst RestartPlusButton = ({\r\n  onClick,\r\n  buttonText = \"Complete\",\r\n}: RestartPlusButtonProps): JSX.Element => {\r\n  return (\r\n    <Box onClick={onClick}>\r\n      <Button\r\n        bg=\"blue.100\"\r\n        leftIcon={<MdOutlineSettingsBackupRestore size={ICON_SIZE} />}\r\n      >\r\n        {buttonText}\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RestartPlusButton;\r\n","import React from \"react\";\r\nimport { Box, Button } from \"@chakra-ui/react\";\r\nimport { TiPlus } from \"react-icons/ti\";\r\n\r\ninterface PlusButtonProps {\r\n  onClick: () => void;\r\n  buttonText?: string;\r\n}\r\n\r\nconst ICON_SIZE = 20;\r\n\r\nconst PlusButton = ({\r\n  onClick,\r\n  buttonText = \"Complete\",\r\n}: PlusButtonProps): JSX.Element => {\r\n  return (\r\n    <Box onClick={onClick}>\r\n      <Button bg=\"blue.100\" leftIcon={<TiPlus size={ICON_SIZE} />}>\r\n        {buttonText}\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PlusButton;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  BiVolume,\r\n  BiVolumeFull,\r\n  BiVolumeLow,\r\n  BiVolumeMute,\r\n} from \"react-icons/bi\";\r\n\r\ninterface MuteButtonProps {\r\n  muted: boolean;\r\n  volume: number; // 0 to 1\r\n  color?: string;\r\n  hoverColor?: string;\r\n  size?: number;\r\n  onClick: () => void;\r\n}\r\n\r\nconst MuteButton = ({\r\n  muted,\r\n  volume,\r\n  onClick,\r\n  color = \"white\",\r\n  hoverColor = \"#dddddd\",\r\n  size = 40,\r\n}: MuteButtonProps): JSX.Element => {\r\n  const [volumeIconColor, setVolumeIconColor] = useState(color);\r\n\r\n  const iconProps = {\r\n    color: volumeIconColor,\r\n    size,\r\n    onMouseEnter: () => setVolumeIconColor(hoverColor),\r\n    onMouseLeave: () => setVolumeIconColor(color),\r\n    onClick,\r\n  };\r\n\r\n  if (muted) return <BiVolumeMute {...iconProps} />;\r\n  if (volume === 0) return <BiVolume {...iconProps} />;\r\n  if (volume < 0.5) return <BiVolumeLow {...iconProps} />;\r\n  return <BiVolumeFull {...iconProps} />;\r\n};\r\n\r\nexport default MuteButton;\r\n","import React, { ReactNode } from \"react\";\r\nimport { Flex, Heading, Spacer, Stack } from \"@chakra-ui/react\";\r\nimport MuteButton from \"./MuteButton\";\r\n\r\ninterface TimerHeaderProps {\r\n  title: string;\r\n  muteButtonProps?: {\r\n    muted: boolean;\r\n    setMuted: (muted: boolean) => void;\r\n  };\r\n  subTitle?: ReactNode;\r\n}\r\n\r\nconst MUTE_BUTTON_SIZE = 60;\r\n\r\nconst TimerHeader = ({\r\n  title,\r\n  muteButtonProps,\r\n  subTitle,\r\n}: TimerHeaderProps): JSX.Element => {\r\n  if (!muteButtonProps) {\r\n    return (\r\n      <Stack align=\"center\">\r\n        <Heading size=\"lg\">{title}</Heading>\r\n        {subTitle}\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex width=\"100%\">\r\n      <MuteButton\r\n        muted={muteButtonProps.muted}\r\n        volume={1}\r\n        onClick={() => muteButtonProps.setMuted(!muteButtonProps.muted)}\r\n        size={MUTE_BUTTON_SIZE}\r\n        color=\"#dddddd\"\r\n        hoverColor=\"#888888\"\r\n      />\r\n      <Spacer />\r\n      <Stack align=\"center\" ml={`-${MUTE_BUTTON_SIZE}px`}>\r\n        <Heading size=\"lg\">{title}</Heading>\r\n        {subTitle && (\r\n          <Heading\r\n            size=\"md\"\r\n            color=\"gray.500\"\r\n            fontWeight=\"semibold\"\r\n            letterSpacing=\"wide\"\r\n          >\r\n            {subTitle}\r\n          </Heading>\r\n        )}\r\n      </Stack>\r\n      <Spacer />\r\n      <div />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default TimerHeader;\r\n","import React from \"react\";\r\nimport { Heading } from \"@chakra-ui/react\";\r\n\r\ninterface SubtitleProps {\r\n  text: string;\r\n}\r\n\r\nconst Subtitle = ({ text }: SubtitleProps): JSX.Element => {\r\n  return (\r\n    <Heading\r\n      size=\"md\"\r\n      color=\"gray.500\"\r\n      fontWeight=\"semibold\"\r\n      letterSpacing=\"wide\"\r\n    >\r\n      {text}\r\n    </Heading>\r\n  );\r\n};\r\n\r\nexport default Subtitle;\r\n","import React from \"react\";\r\nimport { CounterTimer } from \"../../logic/Timer\";\r\nimport \"./timer.css\";\r\nimport useCounterTimer from \"../../logic/hooks/useCounterTimer\";\r\nimport { Heading, Stack } from \"@chakra-ui/react\";\r\nimport TimeDisplay, { TimeDisplayState } from \"../../components/TimeDisplay\";\r\nimport PlayStopButton from \"../../components/Buttons/PlayStopButton\";\r\nimport RestartButton from \"../../components/Buttons/RestartButton\";\r\nimport RestartPlusButton from \"../../components/Buttons/RestartPlusButton\";\r\nimport PlusButton from \"../../components/Buttons/PlusButton\";\r\nimport TimerHeader from \"../../components/TimerHeader\";\r\nimport Subtitle from \"../../components/Font/Subtitle\";\r\n\r\ninterface CounterTimerRendererProps {\r\n  timer: CounterTimer;\r\n  timerId: string;\r\n}\r\n\r\nconst CounterTimerRenderer = ({\r\n  timer,\r\n  timerId,\r\n}: CounterTimerRendererProps): JSX.Element => {\r\n  const state = useCounterTimer(timerId, timer);\r\n\r\n  return (\r\n    <Stack align=\"center\" height=\"100%\">\r\n      <TimerHeader\r\n        title={timer.title}\r\n        muteButtonProps={{\r\n          muted: state.muted,\r\n          setMuted: state.setMuted,\r\n        }}\r\n        subTitle={\r\n          <Subtitle text={`Completed ${state.timesCompleted} times today`} />\r\n        }\r\n      />\r\n      <TimeDisplay\r\n        seconds={state.secondsRemaining}\r\n        state={\r\n          state.stopped\r\n            ? TimeDisplayState.Stopped\r\n            : state.markedForRestart\r\n            ? TimeDisplayState.MarkedForRestart\r\n            : TimeDisplayState.Normal\r\n        }\r\n      />\r\n\r\n      <Stack direction=\"column\" spacing=\"1rem\" align=\"center\">\r\n        <PlayStopButton\r\n          stopped={state.stopped}\r\n          onClick={() => state.setStopped(!state.stopped)}\r\n        />\r\n        {/* Complete buttons */}\r\n        <Stack direction=\"row\" marginTop=\"0px !important\">\r\n          {state.secondsRemaining > 0 && (\r\n            <PlusButton onClick={state.complete} />\r\n          )}\r\n          <RestartPlusButton onClick={state.completeAndRestart} />\r\n          {state.secondsRemaining > 0 && (\r\n            <RestartButton\r\n              onClick={state.completeAndMarkForRestart}\r\n              buttonText=\"Complete and Autorestart\"\r\n            />\r\n          )}\r\n        </Stack>\r\n        {/* Restart buttons */}\r\n        <RestartButton onClick={state.restart} />\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default CounterTimerRenderer;\r\n","import { useCallback } from \"react\";\r\nimport { CounterTimer } from \"../Timer\";\r\nimport useCountdownTimer from \"./useCountdownTimer\";\r\n\r\ninterface UseCounterTimerResponse {\r\n  secondsRemaining: number;\r\n  timesCompleted: number;\r\n  stopped: boolean;\r\n  markedForRestart: boolean;\r\n  muted: boolean;\r\n  setMuted: (muted: boolean) => void;\r\n  setStopped: (stopped: boolean) => void;\r\n  // actions\r\n  complete: () => void;\r\n  completeAndRestart: () => void;\r\n  restart: () => void;\r\n  completeAndMarkForRestart: () => void;\r\n}\r\n\r\nexport default function useCounterTimer(\r\n  key: string,\r\n  timer: CounterTimer\r\n): UseCounterTimerResponse {\r\n  const {\r\n    timerState,\r\n    secondsRemaining,\r\n    stopped,\r\n    markedForRestart,\r\n    muted,\r\n    setMuted,\r\n    setStopped,\r\n    incrementTimesCompleted,\r\n    resetTimer,\r\n    setMarkedForRestart,\r\n  } = useCountdownTimer(key, timer.durationInSeconds);\r\n\r\n  const timesCompleted = timerState ? timerState.timesCompleted : -1;\r\n\r\n  const completeAndRestart = useCallback(() => {\r\n    incrementTimesCompleted();\r\n    resetTimer();\r\n  }, [incrementTimesCompleted, resetTimer]);\r\n\r\n  const completeAndMarkForRestart = useCallback(() => {\r\n    incrementTimesCompleted();\r\n    setMarkedForRestart();\r\n  }, [incrementTimesCompleted, setMarkedForRestart]);\r\n\r\n  return {\r\n    timesCompleted,\r\n    secondsRemaining,\r\n    stopped,\r\n    markedForRestart,\r\n    muted,\r\n    setMuted,\r\n    setStopped,\r\n    complete: incrementTimesCompleted,\r\n    restart: resetTimer,\r\n    completeAndRestart,\r\n    completeAndMarkForRestart,\r\n  };\r\n}\r\n","import { useMemo, useState } from \"react\";\r\nimport useInterval from \"../logic/hooks/useInterval\";\r\nimport { useAppSelector } from \"../store\";\r\n\r\ninterface UseTimerFlashingStateResponse {\r\n  flashing: boolean;\r\n  bgColor: string;\r\n}\r\n\r\nconst NON_FLASH_COLOR = \"gray.100\";\r\nconst FLASH_COLOR = \"yellow.200\";\r\nconst FLASH_INTERVAL = 200;\r\n\r\nexport default function useTimerFlashingState(\r\n  key: string\r\n): UseTimerFlashingStateResponse {\r\n  const timersState = useAppSelector((state) => state.timers);\r\n\r\n  const [bgColor, setBgColor] = useState(NON_FLASH_COLOR);\r\n\r\n  const flashing = useMemo(() => {\r\n    if (!(key in timersState)) return true;\r\n    return timersState[key].stopped ? false : timersState[key].flashing;\r\n  }, [timersState, key]);\r\n\r\n  useInterval(() => {\r\n    if (flashing) {\r\n      setBgColor(bgColor === NON_FLASH_COLOR ? FLASH_COLOR : NON_FLASH_COLOR);\r\n    } else if (bgColor !== NON_FLASH_COLOR) {\r\n      setBgColor(NON_FLASH_COLOR);\r\n    }\r\n  }, FLASH_INTERVAL);\r\n\r\n  return { flashing, bgColor };\r\n}\r\n","import React from \"react\";\r\nimport TimeDisplay, { TimeDisplayState } from \"../../components/TimeDisplay\";\r\nimport { StopwatchTimer } from \"../../logic/Timer\";\r\nimport useTimerState from \"../../state/useTimerState\";\r\nimport PlayStopButton from \"../../components/Buttons/PlayStopButton\";\r\nimport TimerHeader from \"../../components/TimerHeader\";\r\nimport { Flex, Spacer, Stack } from \"@chakra-ui/react\";\r\n\r\ninterface StopwatchTimerRendererProps {\r\n  timer: StopwatchTimer;\r\n  timerId: string;\r\n}\r\n\r\nconst StopwatchTimerRenderer = ({\r\n  timer,\r\n  timerId,\r\n}: StopwatchTimerRendererProps): JSX.Element => {\r\n  const state = useTimerState(timerId);\r\n\r\n  return (\r\n    <Stack align=\"center\" height=\"100%\">\r\n      <TimerHeader title={timer.title} />\r\n      <Flex\r\n        direction=\"column\"\r\n        align=\"center\"\r\n        height=\"100%\"\r\n        justifyContent=\"space-around\"\r\n      >\r\n        <TimeDisplay\r\n          seconds={state.seconds}\r\n          state={\r\n            state.stopped ? TimeDisplayState.Stopped : TimeDisplayState.Normal\r\n          }\r\n        />\r\n        <PlayStopButton\r\n          stopped={state.stopped}\r\n          onClick={() => state.setStopped(!state.stopped)}\r\n        />\r\n      </Flex>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default StopwatchTimerRenderer;\r\n","import React from \"react\";\r\nimport { Box, Button } from \"@chakra-ui/react\";\r\nimport { BiRightArrowAlt } from \"react-icons/bi\";\r\n\r\ninterface NextButtonProps {\r\n  onClick: () => void;\r\n  buttonText?: string;\r\n}\r\n\r\nconst ICON_SIZE = 30;\r\n\r\nconst NextButton = ({\r\n  onClick,\r\n  buttonText = \"Next\",\r\n}: NextButtonProps): JSX.Element => {\r\n  return (\r\n    <Box onClick={onClick}>\r\n      <Button bg=\"blue.100\" leftIcon={<BiRightArrowAlt size={ICON_SIZE} />}>\r\n        {buttonText}\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default NextButton;\r\n","import { useCallback, useMemo, useState } from \"react\";\r\nimport timersSlice from \"../../state/timersSlice\";\r\nimport { useAppDispatch } from \"../../store\";\r\nimport { TimerState } from \"../Timer\";\r\nimport useCountdownTimer from \"./useCountdownTimer\";\r\n\r\ninterface StateTimerResponse {\r\n  title: string;\r\n  totalSeconds: number;\r\n}\r\n\r\ninterface UseMultiStateTimerResponse {\r\n  states: StateTimerResponse[];\r\n  currentTitle: string;\r\n  nextStateTitle: string;\r\n  currentIndex: number;\r\n  secondsRemaining: number;\r\n  stopped: boolean;\r\n  setStopped: (stopped: boolean) => void;\r\n  muted: boolean;\r\n  setMuted: (muted: boolean) => void;\r\n  moveToNextState: () => void;\r\n}\r\n\r\nconst actions = timersSlice.actions;\r\n\r\nexport default function useMultiStateTimer(\r\n  key: string,\r\n  states: TimerState[]\r\n): UseMultiStateTimerResponse {\r\n  const [currentStateIndex, setCurrentStateIndex] = useState(0);\r\n\r\n  const currentState = useMemo(\r\n    () => states[currentStateIndex],\r\n    [states, currentStateIndex]\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n  const addSecondsToCurrentState = useCallback(\r\n    (incrementBy: number) => {\r\n      dispatch(\r\n        actions.addStatesSecondsAt({\r\n          key,\r\n          index: currentStateIndex,\r\n          value: incrementBy,\r\n        })\r\n      );\r\n    },\r\n    [dispatch, currentStateIndex, key]\r\n  );\r\n\r\n  const countdownState = useCountdownTimer(\r\n    key,\r\n    currentState.durationInSeconds,\r\n    () => addSecondsToCurrentState(1)\r\n  );\r\n  const timerState = countdownState.timerState;\r\n\r\n  const getNextStateIndex = useCallback(\r\n    () => (currentStateIndex >= states.length - 1 ? 0 : currentStateIndex + 1),\r\n    [currentStateIndex, states]\r\n  );\r\n\r\n  const nextStateTitle = useMemo(() => {\r\n    return states[getNextStateIndex()].title;\r\n  }, [states, getNextStateIndex]);\r\n\r\n  const moveToNextState = useCallback(() => {\r\n    countdownState.resetTimer();\r\n    setCurrentStateIndex(getNextStateIndex());\r\n  }, [setCurrentStateIndex, countdownState, getNextStateIndex]);\r\n\r\n  const statesResponse = useMemo(() => {\r\n    if (!timerState) return [];\r\n    return states.map(\r\n      (multiTimerState: TimerState, i: number): StateTimerResponse => {\r\n        return {\r\n          title: multiTimerState.title,\r\n          totalSeconds: timerState.statesSeconds[i],\r\n        };\r\n      }\r\n    );\r\n  }, [timerState, states]);\r\n\r\n  return {\r\n    currentIndex: currentStateIndex,\r\n    currentTitle: currentState.title,\r\n    nextStateTitle,\r\n    secondsRemaining: countdownState.secondsRemaining,\r\n    stopped: countdownState.stopped,\r\n    states: statesResponse,\r\n    setStopped: countdownState.setStopped,\r\n    muted: countdownState.muted,\r\n    setMuted: countdownState.setMuted,\r\n    moveToNextState,\r\n  };\r\n}\r\n","import { Flex, Heading, Stack } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport NextButton from \"../../components/Buttons/NextButton\";\r\nimport PlayStopButton from \"../../components/Buttons/PlayStopButton\";\r\nimport TimeDisplay, { TimeDisplayState } from \"../../components/TimeDisplay\";\r\nimport TimerHeader from \"../../components/TimerHeader\";\r\nimport useMultiStateTimer from \"../../logic/hooks/useMultiStateTimer\";\r\nimport { MultiStateTimer } from \"../../logic/Timer\";\r\nimport \"./timer.css\";\r\n\r\ninterface MultiStateTimerRendererProps {\r\n  timer: MultiStateTimer;\r\n  timerId: string;\r\n}\r\n\r\nconst MultiStateTimerRenderer = ({\r\n  timer,\r\n  timerId,\r\n}: MultiStateTimerRendererProps): JSX.Element => {\r\n  const state = useMultiStateTimer(timerId, timer.states);\r\n\r\n  return (\r\n    <Stack align=\"center\" height=\"100%\">\r\n      <TimerHeader\r\n        title={timer.title}\r\n        muteButtonProps={{\r\n          muted: state.muted,\r\n          setMuted: state.setMuted,\r\n        }}\r\n        subTitle={\r\n          <Stack direction=\"row\" align=\"center\" spacing=\"5rem\">\r\n            {state.states.map((stateState, i: number) => {\r\n              return (\r\n                <TimeDisplay\r\n                  seconds={stateState.totalSeconds}\r\n                  size=\"xl\"\r\n                  state={\r\n                    state.currentIndex === i\r\n                      ? state.stopped\r\n                        ? TimeDisplayState.Stopped\r\n                        : TimeDisplayState.Active\r\n                      : TimeDisplayState.Normal\r\n                  }\r\n                  heading={stateState.title}\r\n                  headingColor={state.currentIndex === i ? \"black\" : \"gray.500\"}\r\n                  key={`${i}`}\r\n                />\r\n              );\r\n            })}\r\n          </Stack>\r\n        }\r\n      />\r\n      <Flex\r\n        direction=\"column\"\r\n        align=\"center\"\r\n        height=\"100%\"\r\n        justifyContent=\"space-around\"\r\n      >\r\n        <Heading size=\"lg\">{state.currentTitle}</Heading>\r\n        <TimeDisplay\r\n          seconds={state.secondsRemaining}\r\n          state={\r\n            state.stopped ? TimeDisplayState.Stopped : TimeDisplayState.Normal\r\n          }\r\n        />\r\n        <PlayStopButton\r\n          stopped={state.stopped}\r\n          onClick={() => state.setStopped(!state.stopped)}\r\n        />\r\n        <NextButton\r\n          onClick={state.moveToNextState}\r\n          buttonText={`Switch to ${state.nextStateTitle}`}\r\n        />\r\n      </Flex>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default MultiStateTimerRenderer;\r\n","import React from \"react\";\r\nimport { Box, Container } from \"@chakra-ui/react\";\r\nimport {\r\n  CounterTimer,\r\n  MultiStateTimer,\r\n  StopwatchTimer,\r\n  Timer,\r\n  TimerType,\r\n} from \"../../logic/Timer\";\r\nimport CounterTimerRenderer from \"./CounterTimerRenderer\";\r\nimport \"./timer.css\";\r\nimport useTimerFlashingState from \"../../state/useTimerFlashingState\";\r\nimport StopwatchTimerRenderer from \"./StopwatchTimerRenderer\";\r\nimport MultiStateTimerRenderer from \"./MultiStateTimerRenderer\";\r\n\r\ninterface TimerRendererProps {\r\n  timer: Timer;\r\n  timerId: string;\r\n}\r\n\r\ninterface TimerContainerProps {\r\n  timerId: string;\r\n  children: any;\r\n}\r\n\r\nconst TimerContainer = ({\r\n  timerId,\r\n  children,\r\n}: TimerContainerProps): JSX.Element => {\r\n  const { bgColor } = useTimerFlashingState(timerId);\r\n\r\n  return (\r\n    <Container maxW=\"container.xl\">\r\n      <Box\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        className=\"timer\"\r\n        bg={bgColor}\r\n        p=\"1rem\"\r\n        height=\"100%\"\r\n      >\r\n        {children}\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst TimerRenderer = ({ timer, timerId }: TimerRendererProps): JSX.Element => {\r\n  if (timer.type === TimerType.CounterTimer) {\r\n    return (\r\n      <TimerContainer timerId={timerId}>\r\n        <CounterTimerRenderer timer={timer as CounterTimer} timerId={timerId} />\r\n      </TimerContainer>\r\n    );\r\n  }\r\n\r\n  if (timer.type === TimerType.Stopwatch) {\r\n    return (\r\n      <TimerContainer timerId={timerId}>\r\n        <StopwatchTimerRenderer\r\n          timer={timer as StopwatchTimer}\r\n          timerId={timerId}\r\n        />\r\n      </TimerContainer>\r\n    );\r\n  }\r\n\r\n  if (timer.type === TimerType.MultiStateTimer) {\r\n    return (\r\n      <TimerContainer timerId={timerId}>\r\n        <MultiStateTimerRenderer\r\n          timerId={timerId}\r\n          timer={timer as MultiStateTimer}\r\n        />\r\n      </TimerContainer>\r\n    );\r\n  }\r\n\r\n  return <div className=\"timer\">Invalid renderer for {timer.title}</div>;\r\n};\r\n\r\nexport default TimerRenderer;\r\n","import React from \"react\";\r\nimport {\r\n  Slider,\r\n  SliderFilledTrack,\r\n  SliderMark,\r\n  SliderThumb,\r\n  SliderTrack,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\n\r\ninterface AudioSliderProps {\r\n  value: number;\r\n  setValue: (value: number) => void;\r\n  disabled: boolean;\r\n}\r\n\r\nconst AudioSlider = ({\r\n  value,\r\n  setValue,\r\n  disabled,\r\n}: AudioSliderProps): JSX.Element => {\r\n  const [showTooltip, setShowTooltip] = React.useState(false);\r\n  return (\r\n    <Slider\r\n      aria-label=\"slider-ex-6\"\r\n      onChange={(val) => setValue(val)}\r\n      width=\"10rem\"\r\n      onMouseEnter={() => setShowTooltip(true)}\r\n      onMouseLeave={() => setShowTooltip(false)}\r\n      isReversed\r\n      isDisabled={disabled}\r\n    >\r\n      <SliderMark\r\n        value={value}\r\n        textAlign=\"center\"\r\n        bg=\"blue.500\"\r\n        color=\"white\"\r\n        mt=\"-10\"\r\n        ml=\"-5\"\r\n        w=\"12\"\r\n      ></SliderMark>\r\n      <SliderTrack bg=\"white\">\r\n        <SliderFilledTrack bg=\"blue.500\" />\r\n      </SliderTrack>\r\n      <Tooltip\r\n        hasArrow\r\n        bg=\"teal.500\"\r\n        color=\"white\"\r\n        placement=\"top\"\r\n        isOpen={showTooltip}\r\n        label={`${Math.round(value)}%`}\r\n      >\r\n        <SliderThumb />\r\n      </Tooltip>\r\n    </Slider>\r\n  );\r\n};\r\n\r\nexport default AudioSlider;\r\n","import { useCallback } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../store\";\r\nimport audioSlice from \"./audioSlice\";\r\n\r\ninterface UseAudioStateResponse {\r\n  muted: boolean;\r\n  setMuted: (muted: boolean) => void;\r\n  volume: number; // between 0 and 1\r\n  setVolume: (volume: number) => void;\r\n}\r\n\r\nconst actions = audioSlice.actions;\r\n\r\nexport default function useAudioState(): UseAudioStateResponse {\r\n  const state = useAppSelector((state) => state.audio);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const setMuted = useCallback(\r\n    (muted: boolean) => dispatch(actions.setMuted(muted)),\r\n    [dispatch]\r\n  );\r\n\r\n  const setVolume = useCallback(\r\n    (volume: number) => dispatch(actions.setVolume(volume)),\r\n    [dispatch]\r\n  );\r\n\r\n  return {\r\n    muted: state.muted,\r\n    setMuted,\r\n    volume: state.volume,\r\n    setVolume,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport AudioSlider from \"../../components/AudioSlider\";\r\nimport useAudioState from \"../../state/useAudioState\";\r\nimport { Stack } from \"@chakra-ui/react\";\r\nimport MuteButton from \"../../components/MuteButton\";\r\n\r\nconst HeaderAudioSlider = (): JSX.Element => {\r\n  const { volume, setVolume, muted, setMuted } = useAudioState();\r\n\r\n  return (\r\n    <Stack direction=\"row\" align=\"center\">\r\n      <AudioSlider\r\n        value={volume * 100}\r\n        setValue={(value: number) => setVolume(value / 100)}\r\n        disabled={muted}\r\n      />\r\n      <MuteButton\r\n        muted={muted}\r\n        volume={volume}\r\n        onClick={() => setMuted(!muted)}\r\n      />\r\n      <div style={{ marginRight: \"1rem\" }} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default HeaderAudioSlider;\r\n","import React from \"react\";\r\nimport { Box, Stack, Heading, Flex, Spacer } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { FaRegClock } from \"react-icons/fa\";\r\nimport \"./header.css\";\r\nimport HeaderAudioSlider from \"./HeaderAudioSlider\";\r\n\r\ninterface HeaderProps {\r\n  startAllTimers: () => void;\r\n  stopAllTimers: () => void;\r\n}\r\n\r\nconst Header = ({\r\n  startAllTimers,\r\n  stopAllTimers,\r\n}: HeaderProps): JSX.Element => {\r\n  return (\r\n    <Box bg=\"tomato\" w=\"100%\" className=\"header\">\r\n      <Flex width=\"100%\">\r\n        <Stack\r\n          direction=\"row\"\r\n          spacing=\"1rem\"\r\n          ml=\"1rem\"\r\n          pt=\"5px\"\r\n          pb=\"5px\"\r\n          align=\"center\"\r\n        >\r\n          <FaRegClock size={40} color=\"white\" />\r\n          <Heading size=\"xl\" color=\"white\">\r\n            Timers Lesgooo\r\n          </Heading>\r\n          <Button bg=\"blue.100\" onClick={startAllTimers}>\r\n            Start All\r\n          </Button>\r\n          <Button bg=\"blue.100\" onClick={stopAllTimers}>\r\n            Stop All\r\n          </Button>\r\n        </Stack>\r\n        <Spacer />\r\n        <HeaderAudioSlider />\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useCallback } from \"react\";\r\nimport { useAppDispatch } from \"../store\";\r\nimport timersSlice from \"./timersSlice\";\r\n\r\ninterface UseGlobalTimersStateResponse {\r\n  addTimers: (count: number) => void;\r\n  startAllTimers: () => void;\r\n  stopAllTimers: () => void;\r\n}\r\n\r\nconst actions = timersSlice.actions;\r\n\r\nexport default function useGlobalTimersState(): UseGlobalTimersStateResponse {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const addTimers = useCallback(\r\n    (count: number) => {\r\n      for (let i = 0; i < count; i++) {\r\n        console.log(`Adding timer ${i}`);\r\n        dispatch(actions.addTimer(`${i}`));\r\n      }\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const startAllTimers = useCallback(\r\n    () => dispatch(actions.startAllTimers()),\r\n    [dispatch]\r\n  );\r\n\r\n  const stopAllTimers = useCallback(\r\n    () => dispatch(actions.stopAllTimers()),\r\n    [dispatch]\r\n  );\r\n\r\n  return {\r\n    addTimers,\r\n    startAllTimers,\r\n    stopAllTimers,\r\n  };\r\n}\r\n","export default __webpack_public_path__ + \"static/media/beep.c21038da.mp3\";","import { useEffect, useMemo, useState } from \"react\";\r\nimport useInterval from \"../logic/hooks/useInterval\";\r\nimport { useAppSelector } from \"../store\";\r\nimport { TimersState } from \"./timersSlice\";\r\nimport file from \"./beep.mp3\";\r\nimport useAudioState from \"./useAudioState\";\r\n\r\nconst shouldBeep = (state: TimersState): boolean => {\r\n  const states = Object.keys(state).map((key: string) => state[key]);\r\n  for (let i = 0; i < states.length; i++) {\r\n    if (states[i].flashing && !states[i].stopped && !states[i].muted)\r\n      return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst BEEPING_INTERVAL = 1000;\r\n\r\nexport default function useBeeping(): void {\r\n  const timersState = useAppSelector((state) => state.timers);\r\n  const anyFlashing = useMemo(() => shouldBeep(timersState), [timersState]);\r\n\r\n  const { muted, volume } = useAudioState();\r\n\r\n  const [audio] = useState(new Audio(file));\r\n\r\n  useEffect(() => {\r\n    if (muted) {\r\n      audio.volume = 0;\r\n    } else {\r\n      audio.volume = volume;\r\n    }\r\n  }, [audio, muted, volume]);\r\n\r\n  useInterval(() => {\r\n    if (anyFlashing) {\r\n      audio.play();\r\n    }\r\n  }, BEEPING_INTERVAL);\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { SimpleGrid } from \"@chakra-ui/layout\";\r\nimport \"./App.css\";\r\nimport TimerRenderer from \"./layout/timer/TimerRenderer\";\r\nimport {\r\n  CounterTimer,\r\n  MultiStateTimer,\r\n  StopwatchTimer,\r\n  TimerMap,\r\n  TimerType,\r\n} from \"./logic/Timer\";\r\nimport Header from \"./layout/header/Header\";\r\nimport useGlobalTimersState from \"./state/useGlobalTimersState\";\r\nimport useBeeping from \"./state/useBeeping\";\r\n\r\nconst IS_PROD = true;\r\n\r\nconst waterTimer: CounterTimer = {\r\n  type: TimerType.CounterTimer,\r\n  title: \"Drink 1/2 Hydroflask\",\r\n  durationInSeconds: IS_PROD ? 7200 : 30,\r\n};\r\n\r\nconst officeTimer: StopwatchTimer = {\r\n  type: TimerType.Stopwatch,\r\n  title: \"In Office\",\r\n};\r\n\r\nconst standingTimer: MultiStateTimer = {\r\n  type: TimerType.MultiStateTimer,\r\n  title: \"Stand some you lazy ass\",\r\n  states: [\r\n    { title: \"Sitting\", durationInSeconds: IS_PROD ? 3600 : 20 },\r\n    { title: \"Standing\", durationInSeconds: IS_PROD ? 3600 : 20 },\r\n  ],\r\n};\r\n\r\nconst breakTimer: MultiStateTimer = {\r\n  type: TimerType.MultiStateTimer,\r\n  title: \"Take a break my boi\",\r\n  states: [\r\n    { title: \"Working\", durationInSeconds: IS_PROD ? 3600 : 45 },\r\n    { title: \"Breaking.. bad\", durationInSeconds: IS_PROD ? 600 : 15 },\r\n  ],\r\n};\r\n\r\nconst timers: TimerMap = {\r\n  waterTimer: waterTimer,\r\n  officeTimer: officeTimer,\r\n  standingTimer: standingTimer,\r\n  breakTimer: breakTimer,\r\n};\r\n\r\nconst timersList = Object.values(timers);\r\n\r\nconst App = (): JSX.Element => {\r\n  const { addTimers, startAllTimers, stopAllTimers } = useGlobalTimersState();\r\n  useEffect(() => {\r\n    addTimers(timersList.length);\r\n  }, [addTimers]);\r\n\r\n  useBeeping();\r\n\r\n  return (\r\n    <>\r\n      <Header startAllTimers={startAllTimers} stopAllTimers={stopAllTimers} />\r\n      <SimpleGrid\r\n        minChildWidth=\"500px\"\r\n        spacing=\"40px\"\r\n        marginTop=\"5rem\"\r\n        marginBottom=\"2rem\"\r\n      >\r\n        {timersList.map((timer, i) => {\r\n          const key = `${i}`;\r\n          return <TimerRenderer timer={timer} timerId={key} key={key} />;\r\n        })}\r\n      </SimpleGrid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport NoSleep from \"nosleep.js\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport store from \"./store\";\r\n\r\n// enabling no sleep\r\nconst noSleep = new NoSleep();\r\n\r\nfunction enableNoSleep() {\r\n  noSleep.enable();\r\n  document.removeEventListener(\"touchstart\", enableNoSleep, false);\r\n}\r\n\r\ndocument.addEventListener(\"touchstart\", enableNoSleep, false);\r\n\r\n// rendering app\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ChakraProvider>\r\n        <App />\r\n      </ChakraProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}